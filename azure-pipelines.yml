resources:
  containers:
    - container: stable
      image: rust:slim

    # TODO: enable beta image
    - container: beta
      image: rust:slim

    - container: minimum_supported
      image: rust:1.30.0-slim

    - container: nightly
      image: rustlang/rust:nightly-slim

    - container: tarpaulin
      image: xd009642/tarpaulin:latest-nightly
      options: --security-opt seccomp=unconfined

jobs:
  - job: Windows
    pool:
      vmImage: 'vs2017-win2016'
    steps:
    - script: |
        curl -sSf -o rustup-init.exe https://win.rustup.rs
        rustup-init.exe -y --default-toolchain stable
        set PATH=%PATH%;%USERPROFILE%\.cargo\bin
        echo '##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin'
        rustup --version
        rustc --version
        cargo --version
      displayName: 'Install Rust Toolchain'
    - bash: bash .ci/run_build.sh
      displayName: 'Run Test Script'

  - job: macOS
    pool:
      vmImage: 'macOS-10.13'
    steps:
    - script: |
        curl -sSf https://sh.rustup.rs | sh -s -- --default-toolchain stable -y
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        rustup --version
        rustc --version
        cargo --version
      displayName: 'Install Rust Toolchain'
    - bash: bash .ci/run_build.sh
      displayName: 'Run Test Script'

  - job: Linux
    pool:
      vmImage: 'ubuntu-16.04'
    strategy:
      matrix:
        stable:
          containerResource: stable
        beta:
          containerResource: beta
        nightly:
          containerResource: nightly
        minimum_supported:
          containerResource: minimum_supported
        tarpaulin:
          containerResource: tarpaulin

    container: $[ variables['containerResource'] ]

    steps:
    - script: rustup --version
      displayName: 'Show rustup version'

    - script: |
        rustup component add rustfmt-preview clippy-preview
      displayName: 'Install components'
      condition: eq(variables['containerResource'], 'stable')

    - bash: |
        rustup toolchain install beta
        rustup default beta
      displayName: 'Install the beta toolchain'
      condition: eq(variables['containerResource'], 'beta')

    - script: bash .ci/run_test.sh
      displayName: 'Run test on stable channel'
      env:
        CARGO_TERM_VERBOSE: true
      condition: eq(variables['containerResource'], 'stable')

    - script: |
        rm -rf target/doc
        bash .ci/build_doc.sh
        bash .ci/deploy_doc.sh
      displayName: 'Deploy API doc'
      env:
        CARGO_TERM_VERBOSE: true
        GH_TOKEN: $(myGitHubToken)
      condition: eq(variables['containerResource'], 'stable')

    - bash: bash .ci/run_build.sh
      displayName: 'Build on beta channel'
      env:
        CARGO_TERM_VERBOSE: true
      condition: eq(variables['containerResource'], 'beta')

    - bash: bash .ci/run_build.sh || true
      displayName: 'Build on nightly channel'
      env:
        CARGO_TERM_VERBOSE: true
      condition: eq(variables['containerResource'], 'nightly')

    - bash: bash .ci/run_build.sh
      displayName: 'Build on minimum supported toolchain'
      env:
        CARGO_TERM_VERBOSE: true
      condition: eq(variables['containerResource'], 'minimum_supported')

    - script: |
        cargo tarpaulin --all-features --out Xml
        bash <(curl -s https://codecov.io/bash)
      displayName: 'Run tarpaulin'
      env:
        CODECOV_TOKEN: $(myCodecovToken)
      condition: eq(variables['containerResource'], 'tarpaulin')
